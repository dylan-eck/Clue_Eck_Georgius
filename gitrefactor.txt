diff --git a/ErrorLoggingFile.txt b/ErrorLoggingFile.txt
index 0f379c7..30d7802 100644
--- a/ErrorLoggingFile.txt
+++ b/ErrorLoggingFile.txt
@@ -1 +1 @@
-Error: Format of ClueSetupBadFormat306.txt does not match expected format.
+Error: Format of ClueLayout.csv does not match expected format.
diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index be9a7bd..fdbe331 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -2,6 +2,7 @@ package clueGame;
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.util.HashSet;
 import java.util.Scanner;
 import java.util.Set;
@@ -15,8 +16,9 @@ public class Board {
 	private int numCols;
 	
 	private Scanner layoutFile;
-	private String layoutFileName;
 	private Scanner setupFile;
+	
+	private String layoutFileName;
 	private String setupFileName;
 	
 	private Set<BoardCell> targets;
@@ -25,19 +27,14 @@ public class Board {
 	
 	private static Board theInstance = new Board();
 	
-	public static Board getInstance() {
-		return theInstance;
-	}
-	
 	private Board() {
 		super();
 	}
 	
-	// set up the game board
+	// set up game board
 	public void initialize() {
 		
 		rooms = new HashSet<Room>();
-		
 		try {
 			loadSetupConfig();
 			setupFile.close();
@@ -48,7 +45,10 @@ public class Board {
 		}
 	}
 	
-	// setup to read data from setup and 
+	public static Board getInstance() {
+		return theInstance;
+	}
+	
 	public void setConfigFiles(String layOutFile, String setUpFile) {
 		
 		//useful for teling where an error occured and when we have to close and re-open a file
@@ -57,14 +57,22 @@ public class Board {
 		
 		try {
 			layoutFile = new Scanner(new File(layOutFile));
+		} catch (FileNotFoundException e) {
+			e.printStackTrace();
+			System.out.println("The file "+layOutFile+" isn't working. Please check the spelling.");
+		}
+			
+		try {
 			setupFile = new Scanner(new File(setUpFile));
 		} catch (FileNotFoundException e) {
 			e.printStackTrace();
-			System.out.println("Unable to locate setup and/or layout file");
+			System.out.println("The file "+setUpFile+" isn't working. Please check the spelling.");
 		}
+		
 	}
 	
 	public void loadSetupConfig() throws BadConfigFormatException {
+		rooms = new HashSet<Room>();
 		
 		String temp = "";
 		
@@ -84,57 +92,56 @@ public class Board {
 	}
 	
 	public void loadLayoutConfig() throws BadConfigFormatException {
+		String theWholeThing = "";
 		
-		String layoutFileData = "";
-		
-		String layoutFileLineIn = "";
-		int collumnCount = 0;
+		String temp = "";
+		int tempColCount = 0;
 		//set to one initialy because we read in one line to give us the row length and test for bad formating
-		int rowCount = 1;
+		int tempRowCount = 1;
 
 		//first loop to determine the size of the board
-		layoutFileLineIn = layoutFile.nextLine();
-		layoutFileData += layoutFileLineIn;
+		temp = layoutFile.nextLine();
+		theWholeThing += temp;
 		
-		String lineInSplit[] = layoutFileLineIn.split(",");
-		collumnCount = lineInSplit.length;
+		String tempArr[] = temp.split(",");
+		tempColCount = tempArr.length;
 	
 		while(layoutFile.hasNextLine()){
-			layoutFileLineIn=layoutFile.nextLine();
-			layoutFileData += ("\n"+ layoutFileLineIn);			
-			lineInSplit = layoutFileLineIn.split(",");
-			if(lineInSplit.length != collumnCount) {
+			temp=layoutFile.nextLine();
+			theWholeThing += ("\n"+ temp);			
+			tempArr = temp.split(",");
+			if(tempArr.length != tempColCount) {
 				//TODO: add a way to retrieve the files name so that an error message can be printed to a file
 				throw new BadConfigFormatException(layoutFileName);
 			}
-			rowCount++;
+			tempRowCount++;
 		}
 		
 		
-		numRows = rowCount;
-		numCols = collumnCount;
+		numRows = tempRowCount;
+		numCols = tempColCount;
 		
 		boardCellArray = new BoardCell[numCols][numRows];
 		
-		String layoutFileDataSplit[] = layoutFileData.split("\n"); 
-		String currentLine;
-		String currentLineSplit[];
+		String theWholeThingSplit[] = theWholeThing.split("\n"); 
+		String temp2;
+		String tempArr2[];
 		
 		//second loop to actualy get the data
 			//runs once for each row
 			for(int j = 0;j<numRows;j++) {
 				int i = 0;
-				currentLine = layoutFileDataSplit[j];
-				currentLineSplit = currentLine.split(",");
+				temp2 = theWholeThingSplit[j];
+				tempArr2 = temp2.split(",");
 				
-				for(String tileString:currentLineSplit) {
+				for(String str:tempArr2) {
 					//if the space is just a generic cell with nothing special
 
-					if(tileString.length() == 1) {
+					if(str.length() == 1) {
 						
 						boolean testInitial = false;
 						for(Room r:rooms) {
-							if(r.getLetter()==tileString.charAt(0)) {
+							if(r.getLetter()==str.charAt(0)) {
 								testInitial = true;
 							}
 						}
@@ -144,22 +151,22 @@ public class Board {
 						
 						boolean isRoom=false;
 						for(Room r:rooms) {
-							if(tileString.charAt(0)==r.getLetter()) {
+							if(str.charAt(0)==r.getLetter()) {
 								isRoom = true;
-								boardCellArray[i][j] = new BoardCell(i,j,tileString.charAt(0),true);
+								boardCellArray[i][j] = new BoardCell(i,j,str.charAt(0),true);
 							}
 						}
 						
 						if(!isRoom) {
-							boardCellArray[i][j] = new BoardCell(i,j,tileString.charAt(0),false);
+							boardCellArray[i][j] = new BoardCell(i,j,str.charAt(0),false);
 						}
 						
 					//All the doorways, secret passages, room labels, room centers
-					}else if(tileString.length()==2){
+					}else if(str.length()==2){
 						
 						boolean testInitial = false;
 						for(Room r:rooms) {
-							if(r.getLetter()==tileString.charAt(0)) {
+							if(r.getLetter()==str.charAt(0)) {
 								testInitial = true;
 							}
 						}
@@ -169,44 +176,44 @@ public class Board {
 						
 						boolean isRoom=false;
 						for(Room r:rooms) {
-							if(tileString.charAt(0)==r.getLetter()) {
+							if(str.charAt(0)==r.getLetter()) {
 								isRoom = true;
-								boardCellArray[i][j] = new BoardCell(i,j,tileString.charAt(0),true);
+								boardCellArray[i][j] = new BoardCell(i,j,str.charAt(0),true);
 							}
 						}
 						
 						if(!isRoom) {
-							boardCellArray[i][j] = new BoardCell(i,j,tileString.charAt(0),false);
+							boardCellArray[i][j] = new BoardCell(i,j,str.charAt(0),false);
 						}
 						
 						//a bit messy but better than creating a set and using contains()
-						if(tileString.charAt(1)=='^') {
+						if(str.charAt(1)=='^') {
 							boardCellArray[i][j].setDoorDirection(DoorDirection.UP);
-						}else if(tileString.charAt(1)=='>') {
+						}else if(str.charAt(1)=='>') {
 							boardCellArray[i][j].setDoorDirection(DoorDirection.RIGHT);
-						}else if(tileString.charAt(1)=='v') {
+						}else if(str.charAt(1)=='v') {
 							boardCellArray[i][j].setDoorDirection(DoorDirection.DOWN);
-						}else if(tileString.charAt(1)=='<') {
+						}else if(str.charAt(1)=='<') {
 							boardCellArray[i][j].setDoorDirection(DoorDirection.LEFT);
-						}else if(tileString.charAt(1)=='*') {
+						}else if(str.charAt(1)=='*') {
 							boardCellArray[i][j].setRoomCenter();
 							for(Room r:rooms) {
-								if(r.getLetter()==tileString.charAt(0)) 
+								if(r.getLetter()==str.charAt(0)) 
 									r.setCenterCell(boardCellArray[i][j]);
 							}
-						}else if(tileString.charAt(1)=='#') {
+						}else if(str.charAt(1)=='#') {
 							boardCellArray[i][j].setRoomLabel();
 							for(Room r:rooms) {
-								if(r.getLetter()==tileString.charAt(0)) 
+								if(r.getLetter()==str.charAt(0)) 
 									r.setLabelCell(boardCellArray[i][j]);
 							}
 						}else {
-							boardCellArray[i][j].setSecretPassage(tileString.charAt(1));
+							boardCellArray[i][j].setSecretPassage(str.charAt(1));
 						}
 							
 					}else {
 						System.out.println("Ended in square " + i+" "+j);
-						System.out.println(currentLine);
+						System.out.println(temp2);
 						throw new BadConfigFormatException(layoutFileName);
 					}
 					i++;
@@ -215,6 +222,27 @@ public class Board {
 	
 	}
 	
+	public Room getRoom(char letter) {
+		for(Room i:rooms) {
+			if(i.getLetter()==letter) {
+				return i;
+			}
+		}
+		return null;
+	}
+	
+	public Room getRoom(BoardCell cell) {
+		return getRoom(cell.getChar());
+	}
+	
+	public int getNumRows() {
+		return numRows;
+	}
+	
+	public int getNumColumns() {
+		return numCols;
+	}
+	
 	public void calcTargets(BoardCell startCell, int pathlength) {
 		visited = new HashSet<BoardCell>();
 		targets = new HashSet<BoardCell>();
@@ -260,27 +288,6 @@ public class Board {
 		return targets;
 	}
 	
-	public int getNumRows() {
-		return numRows;
-	}
-	
-	public int getNumColumns() {
-		return numCols;
-	}
-	
-	public Room getRoom(char letter) {
-		for(Room i:rooms) {
-			if(i.getLetter()==letter) {
-				return i;
-			}
-		}
-		return null;
-	}
-	
-	public Room getRoom(BoardCell cell) {
-		return getRoom(cell.getChar());
-	}
-
 	public BoardCell getCell(int row, int col) {
 		return boardCellArray[col][row];
 	}
diff --git a/src/clueGame/BoardCell.java b/src/clueGame/BoardCell.java
index 7eebb28..7c26f85 100644
--- a/src/clueGame/BoardCell.java
+++ b/src/clueGame/BoardCell.java
@@ -28,7 +28,6 @@ public class BoardCell {
 		//set to false by default can be changed later in layout
 		isRoomCenter = false;
 		isRoomLabel = false;
-		isOccupied = false;
 		doorDirection = DoorDirection.NONE;
 		
 		adjList = new HashSet<BoardCell>();
@@ -38,40 +37,18 @@ public class BoardCell {
 		isRoomLabel = true;
 	}
 	
-	public boolean isLabel() {
-		return isRoomLabel;
-	}
-	
 	public void setRoomCenter() {
 		isRoomCenter = true;
 	}
 	
-	public boolean isRoomCenter() {
-		return isRoomCenter;
-	}
-	
 	public void setSecretPassage(char exit) {
 		secretPassage = exit;
 	}
 	
-	public char getSecretPassage() {
-		return secretPassage;
-	}
-	
 	public void setDoorDirection(DoorDirection d) {
 		doorDirection = d;
 	}
 
-	public DoorDirection getDoorDirection() {
-		return doorDirection;
-	}
-	
-	public boolean isDoorway() {
-		if(doorDirection != DoorDirection.NONE) 
-			return true;
-		return false;
-	}
-	
 	public boolean isRoom() {
 		return isRoom;
 	}
@@ -106,6 +83,28 @@ public class BoardCell {
 		return adjList;
 	}
 	
+	public boolean isDoorway() {
+		if(doorDirection != DoorDirection.NONE) 
+			return true;
+		return false;
+	}
+	
+	public boolean isLabel() {
+		return isRoomLabel;
+	}
+	
+	public boolean isRoomCenter() {
+		return isRoomCenter;
+	}
+	
+	public char getSecretPassage() {
+		return secretPassage;
+	}
+	
+	public DoorDirection getDoorDirection() {
+		return doorDirection;
+	}
+	
 	public char getChar() {
 		return letter;
 	}
diff --git a/src/clueGame/Room.java b/src/clueGame/Room.java
index bf9ed38..084cd44 100644
--- a/src/clueGame/Room.java
+++ b/src/clueGame/Room.java
@@ -16,22 +16,22 @@ public class Room {
 		labelCell = cell;
 	}
 	
-	public BoardCell getLabelCell() {
-		return labelCell;
-	}
-	
 	public void setCenterCell(BoardCell cell) {
 		centerCell = cell;
 	}
 	
-	public BoardCell getCenterCell() {
-		return centerCell;
-	}
-	
 	public String getName() {
 		return roomName;
 	}
 	
+	public BoardCell getLabelCell() {
+		return labelCell;
+	}
+
+	public BoardCell getCenterCell() {
+		return centerCell;
+	}
+	
 	public char getLetter() {
 		return letter;
 	}
